docker swarm 集群服务编排部署创建docker集群并搭建docker服务，要求服务具有伸缩性，创新点：使用机器学习来预测服务的负载，并自动调整服务的实例数以实现自动化的负载均衡，
在 Docker Swarm 集群服务编排部署中，负载均衡是非常重要的一部分。当服务的负载增加时，Docker Swarm 集群会自动启动更多的服务实例以处理负载。然而，手动调整服务实例数是繁琐且容易出错的。使用机器学习，我们可以预测服务的负载，并自动调整服务实例数，从而实现自动化的负载均衡。
su root
abc
1.初始化Swarm
apt install net-tools
ifconfig
192.168.124.130
docker swarm init
docker swarm init --advertise-addr <MANAGER-IP>
2.加入Swarm（需要替换为实际值）
docker swarm join --token SWMTKN-1-3oxaa3iwfyblo51alsf07xdj20guu43n4i2skzfvjb2jjkinu6-dns3vsrxmhgfkmwudsjlegy9n 192.168.124.130:2377
docker info
4.查看
docker node ls
5.创建服务
docker service create --replicas 3 --name web nginx
docker service create --name my-service my-image

扩展服务：如果您需要扩展服务的副本数量，可以使用Swarm的扩展功能。例如，您可以使用以下命令将"my-service"服务的副本数量扩展到3个：、
docker service scale my-service=3

6.运行服务（可以另外开一个终端）
docker service ps web
docker service ps my-service

7.1搭建 Docker 服务并设置伸缩性
在项目目录（home/df）中创建一个名为 docker-stack.yml 的文件

version: "3"  
services:  
  my-service:  
    image: my-image:latest  
    deploy:  
      replicas: 3  
      update_config:  
        parallelism: 2  
        delay: 10s  
      restart_policy:  
        condition: on-failure

my-service 是您的服务名称，my-image:latest 是您要部署的 Docker 镜像。在 deploy 部分中，您可以设置服务的副本数、更新策略和重启策略等。例如，在上面的配置中，我们将服务的副本数设置为 3，并设置了更新策略和重启策略。更新策略指定了每次更新时并行更新的服务实例数和更新之间的延迟时间。重启策略指定了在服务实例失败时重启的条件。这些策略可以帮助您实现服务的自动伸缩。


7.2vim docker-stack.yml（目录是home/df）

version: "3"
services:
  my-service:
    image: my-image:latest
    deploy:
      replicas: '''{{ if eq .Mode "predict" }}{{ if eq .Prediction 3 }}3{{ else }}1{{ end }}{{ end }}'''
    command: python /path/to/predict_load.py


8.指定文件夹下创建vim predict_load.py
mkdir path
cd path
mkdir to
cd to
vim predict_load.py

# 导入必要的库  
from sklearn.linear_model import LinearRegression  
from sklearn.model_selection import train_test_split  
import pandas as pd  
  
# 读取数据  
data = pd.read_csv('service_metrics.csv')  
  
# 数据预处理  
data = data.dropna()  # 删除缺失值  
data = data.drop(['time', 'user_id', 'request_id', 'response_time'], axis=1)  # 删除无用特征  
X = data.drop('load', axis=1)  # 特征提取  
y = data['load']  # 目标变量提取  
  
# 分割数据集  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  
  
# 训练机器学习模型  
model = LinearRegression()  
model.fit(X_train, y_train)  
  
# 预测服务的负载  
new_data = pd.DataFrame({'CPU Usage': [0.5, 0.7, 0.9], 'Memory Usage': [0.6, 0.8, 1.0]})  # 新数据集  
predicted_loads = model.predict(new_data)  # 预测负载值  
print(predicted_loads)  
  
# 自动化调整服务实例数（这里省略了具体的 Docker 和 Docker Compose 实现）


4.搭建服务
cd /
cd home
cd df
docker stack deploy -c docker-stack.yml you-stack